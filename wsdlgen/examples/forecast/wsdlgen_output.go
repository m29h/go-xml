// Code generated by wsdlgen. DO NOT EDIT.

// Package forecast access the National Digital Forecast Database.
//
// The service has 12 exposed functions, NDFDgen, NDFDgenLatLonList, NDFDgenByDay, NDFDgenByDayLatLonList,
// LatLonListSubgrid, LatLonListLine, LatLonListZipCode, CornerPoints, LatLonListSquare, GmlLatLonList, GmlTimeSeries, and LatLonListCityNames.
// For the NDFDgen function, the client needs to provide a latitude and longitude pair and the product type. The Unit will default
// to U.S. Standard (english) unless Metric is chosen by client. The client also needs to provide the start and end time (Local)
// of the period that it wants data for (if shorter than the 7 days is wanted).  For the time-series product, the client needs to
// provide an array of boolean values corresponding to which NDFD values are desired.
// For the NDFDgenByDay function, the client needs to provide a latitude and longitude pair, the date (Local) it wants to start
// retrieving data for and the number of days worth of data.  The Unit will default to U.S. Standard (english) unless Metric is
// chosen by client. The client also needs to provide the format that is desired.
// For the multi point versions, NDFDgenLatLonList and NDFDgenByDayLatLonList a space delimited list of latitude and longitude
// pairs are substituted for the single latitude and longitude input.  Each latitude and longitude
// pair is composed of a latitude and longitude delimited by a comma.
// For the LatLonListSubgrid, the user provides a comma delimited latitude and longitude pair for the lower left and for
// the upper right corners of a rectangular subgrid.  The function can also take a integer
// resolution to reduce the number of grid points returned. The service then returns a list of
// latitude and longitude pairs for all the grid points contained in the subgrid.
// weather values should appear in the time series product.
// For the LatLonListLine, The inputs are the same as the function NDFDgen except the latitude and longitude pair is
// replaced by two latitude and longitude pairs, one for each end point a line. The two points are delimited with a space.
// The service then returns data for all the NDFD points on the line formed by the two points.
// For the LatLonListZipCode function, the input is the same as the NDFDgen function except the latitude and longitude values
// are relaced by a zip code for the 50 United States and Puerto Rico.
// For the LatLonListSquare function, the input is the same as the NDFDgen function except the latitude and longitude values
// are relaced by a zip code for the 50 United States and Puerto Rico.
// For the CornerPoints function, the service requires a valid NDFD grid name.  The function returns a
// list of four latitude and longitude pairs, one for each corner of the NDFD grid.  The function
// also returns the minimum resolution required to return the entire grid below the maximum points
// threshold.
// For the GmlLatLonList function, the service requires a list of latitude and longitude pairs, the time (UTC) the user
// wants data for, the GML feature type and the array of boolean values corresponding to which NDFD values are desired.
// For the GmlTimeSeries function, the service requires a list of latitude and longitude pairs, the start and end time (UTC) the user
// wants data for, a comparison type (IsEqual, Between, GreaterThan, GreaterThan, GreaterThanEqualTo, LessThan, and
// LessThanEqualTo), the GML feature type and The input variable "propertyName" contains a comma delimited string of NDFD element to
// indicate which weather parameters are being requested.
// For the LatLonListCityNames function, the services requires a detail level that that ranges from 1 to 4.  Level 1 generally represents
// large main cities.  Level 2 represents progressively smaller cities or large cities that are close to another even larger city.  Levels
// 3 and 4 are part one and two of a list of cities that help increase the areal coverage of the cities dataset.  This functions
// returns a list of latitude and longitude values along with a seperate list of city name for those point.
package forecast

import (
	"bytes"
	"context"
	"encoding/xml"
	"time"
)

// May be one of IsEqual, Between, GreaterThan, GreaterThanEqualTo, LessThan, LessThanEqualTo
type CompType string

type CornerPointsRequest struct {
	XMLName xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl CornerPointsRequest"`
	Sector  Sector   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl sector"`
}

type CornerPointsResponse struct {
	XMLName       xml.Name   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl CornerPointsResponse"`
	ListLatLonOut ListLatLon `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLonOut"`
}

// May be one of 1, 2, 3, 4, 12, 34, 1234
type DisplayLevel int

// May be one of Forecast_Gml2Point, Forecast_Gml2AllWx, Forecast_GmlsfPoint, Forecast_GmlObs, NdfdMultiPointCoverage, Ndfd_KmlPoint
type FeatureType string

// May be one of 24 hourly, 12 hourly
type Format string

type GmlLatLonListRequest struct {
	XMLName           xml.Name          `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlLatLonListRequest"`
	ListLatLon        ListLatLon        `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLon"`
	RequestedTime     time.Time         `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl requestedTime"`
	Feature           FeatureType       `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl featureType"`
	WeatherParameters WeatherParameters `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl weatherParameters"`
}

func (t *GmlLatLonListRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GmlLatLonListRequest
	var layout struct {
		*T
		RequestedTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl requestedTime"`
	}
	layout.T = (*T)(t)
	layout.RequestedTime = (*xsdDateTime)(&layout.T.RequestedTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "GmlLatLonListRequest"
	return e.EncodeElement(layout, start)
}
func (t *GmlLatLonListRequest) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GmlLatLonListRequest
	var overlay struct {
		*T
		RequestedTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl requestedTime"`
	}
	overlay.T = (*T)(t)
	overlay.RequestedTime = (*xsdDateTime)(&overlay.T.RequestedTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "GmlLatLonListRequest"
	return d.DecodeElement(&overlay, &start)
}

type GmlLatLonListResponse struct {
	XMLName  xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlLatLonListResponse"`
	DwGmlOut string   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl dwGmlOut"`
}

type GmlTimeSeriesRequest struct {
	XMLName      xml.Name    `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlTimeSeriesRequest"`
	ListLatLon   ListLatLon  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLon"`
	StartTime    time.Time   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
	EndTime      time.Time   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	Comp         CompType    `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl compType"`
	Feature      FeatureType `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl featureType"`
	PropertyName string      `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl propertyName"`
}

func (t *GmlTimeSeriesRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GmlTimeSeriesRequest
	var layout struct {
		*T
		StartTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
		EndTime   *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	}
	layout.T = (*T)(t)
	layout.StartTime = (*xsdDateTime)(&layout.T.StartTime)
	layout.EndTime = (*xsdDateTime)(&layout.T.EndTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "GmlTimeSeriesRequest"
	return e.EncodeElement(layout, start)
}
func (t *GmlTimeSeriesRequest) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GmlTimeSeriesRequest
	var overlay struct {
		*T
		StartTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
		EndTime   *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	}
	overlay.T = (*T)(t)
	overlay.StartTime = (*xsdDateTime)(&overlay.T.StartTime)
	overlay.EndTime = (*xsdDateTime)(&overlay.T.EndTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "GmlTimeSeriesRequest"
	return d.DecodeElement(&overlay, &start)
}

type GmlTimeSeriesResponse struct {
	XMLName  xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlTimeSeriesResponse"`
	DwGmlOut string   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl dwGmlOut"`
}

type LatLonListCityNamesRequest struct {
	XMLName      xml.Name     `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListCityNamesRequest"`
	DisplayLevel DisplayLevel `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl displayLevel"`
}

type LatLonListCityNamesResponse struct {
	XMLName          xml.Name      `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListCityNamesResponse"`
	ListCityNamesOut ListCityNames `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listCityNamesOut"`
}

type LatLonListLineRequest struct {
	XMLName      xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListLineRequest"`
	EndPoint1Lat float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endPoint1Lat"`
	EndPoint1Lon float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endPoint1Lon"`
	EndPoint2Lat float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endPoint2Lat"`
	EndPoint2Lon float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endPoint2Lon"`
}

type LatLonListLineResponse struct {
	XMLName       xml.Name   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListLineResponse"`
	ListLatLonOut ListLatLon `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLonOut"`
}

type LatLonListSquareRequest struct {
	XMLName        xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSquareRequest"`
	CenterPointLat float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl centerPointLat"`
	CenterPointLon float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl centerPointLon"`
	DistanceLat    float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl distanceLat"`
	DistanceLon    float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl distanceLon"`
	Resolution     float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl resolution"`
}

type LatLonListSquareResponse struct {
	XMLName       xml.Name   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSquareResponse"`
	ListLatLonOut ListLatLon `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLonOut"`
}

type LatLonListSubgridRequest struct {
	XMLName             xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSubgridRequest"`
	LowerLeftLatitude   float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl lowerLeftLatitude"`
	LowerLeftLongitude  float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl lowerLeftLongitude"`
	UpperRightLatitude  float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl upperRightLatitude"`
	UpperRightLongitude float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl upperRightLongitude"`
	Resolution          float64  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl resolution"`
}

type LatLonListSubgridResponse struct {
	XMLName       xml.Name   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSubgridResponse"`
	ListLatLonOut ListLatLon `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLonOut"`
}

type LatLonListZipCodeRequest struct {
	XMLName     xml.Name    `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListZipCodeRequest"`
	ZipCodeList ZipCodeList `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl zipCodeList"`
}

type LatLonListZipCodeResponse struct {
	XMLName       xml.Name   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListZipCodeResponse"`
	ListLatLonOut ListLatLon `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLonOut"`
}

// Must match the pattern [\-]?\d{1,2}\.\d+,[\-]?\d{1,3}\.\d+
type LatLonPair string

// Must match the pattern [a-zA-Z'\-]*( ?[a-zA-Z'\-]*)*,[A-Z][A-Z](\|[a-zA-Z'\-]*( ?[a-zA-Z'\-]*)*,[A-Z][A-Z])*
type ListCityNames string

// Must match the pattern [\-]?\d{1,2}\.\d+,[\-]?\d{1,3}\.\d+( [\-]?\d{1,2}\.\d+,[\-]?\d{1,3}\.\d+)*
type ListLatLon string

type NDFDgenByDayLatLonListRequest struct {
	XMLName    xml.Name   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayLatLonListRequest"`
	ListLatLon ListLatLon `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLon"`
	StartDate  time.Time  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startDate"`
	NumDays    int        `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl numDays"`
	Unit       Unit       `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl Unit"`
	Format     Format     `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl format"`
}

func (t *NDFDgenByDayLatLonListRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NDFDgenByDayLatLonListRequest
	var layout struct {
		*T
		StartDate *xsdDate `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startDate"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenByDayLatLonListRequest"
	return e.EncodeElement(layout, start)
}
func (t *NDFDgenByDayLatLonListRequest) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NDFDgenByDayLatLonListRequest
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startDate"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenByDayLatLonListRequest"
	return d.DecodeElement(&overlay, &start)
}

type NDFDgenByDayLatLonListResponse struct {
	XMLName      xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayLatLonListResponse"`
	DwmlByDayOut string   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl dwmlByDayOut"`
}

type NDFDgenByDayRequest struct {
	XMLName   xml.Name  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayRequest"`
	Latitude  float64   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl latitude"`
	Longitude float64   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl longitude"`
	StartDate time.Time `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startDate"`
	NumDays   int       `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl numDays"`
	Unit      Unit      `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl Unit"`
	Format    Format    `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl format"`
}

func (t *NDFDgenByDayRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NDFDgenByDayRequest
	var layout struct {
		*T
		StartDate *xsdDate `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startDate"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenByDayRequest"
	return e.EncodeElement(layout, start)
}
func (t *NDFDgenByDayRequest) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NDFDgenByDayRequest
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startDate"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenByDayRequest"
	return d.DecodeElement(&overlay, &start)
}

type NDFDgenByDayResponse struct {
	XMLName      xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayResponse"`
	DwmlByDayOut string   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl dwmlByDayOut"`
}

type NDFDgenLatLonListRequest struct {
	XMLName           xml.Name          `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenLatLonListRequest"`
	ListLatLon        ListLatLon        `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl listLatLon"`
	Product           Product           `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl product"`
	StartTime         time.Time         `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
	EndTime           time.Time         `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	Unit              Unit              `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl Unit"`
	WeatherParameters WeatherParameters `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl weatherParameters"`
}

func (t *NDFDgenLatLonListRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NDFDgenLatLonListRequest
	var layout struct {
		*T
		StartTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
		EndTime   *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	}
	layout.T = (*T)(t)
	layout.StartTime = (*xsdDateTime)(&layout.T.StartTime)
	layout.EndTime = (*xsdDateTime)(&layout.T.EndTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenLatLonListRequest"
	return e.EncodeElement(layout, start)
}
func (t *NDFDgenLatLonListRequest) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NDFDgenLatLonListRequest
	var overlay struct {
		*T
		StartTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
		EndTime   *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	}
	overlay.T = (*T)(t)
	overlay.StartTime = (*xsdDateTime)(&overlay.T.StartTime)
	overlay.EndTime = (*xsdDateTime)(&overlay.T.EndTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenLatLonListRequest"
	return d.DecodeElement(&overlay, &start)
}

type NDFDgenLatLonListResponse struct {
	XMLName xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenLatLonListResponse"`
	DwmlOut string   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl dwmlOut"`
}

type NDFDgenRequest struct {
	XMLName           xml.Name          `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenRequest"`
	Latitude          float64           `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl latitude"`
	Longitude         float64           `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl longitude"`
	Product           Product           `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl product"`
	StartTime         time.Time         `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
	EndTime           time.Time         `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	Unit              Unit              `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl Unit"`
	WeatherParameters WeatherParameters `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl weatherParameters"`
}

func (t *NDFDgenRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NDFDgenRequest
	var layout struct {
		*T
		StartTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
		EndTime   *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	}
	layout.T = (*T)(t)
	layout.StartTime = (*xsdDateTime)(&layout.T.StartTime)
	layout.EndTime = (*xsdDateTime)(&layout.T.EndTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenRequest"
	return e.EncodeElement(layout, start)
}
func (t *NDFDgenRequest) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NDFDgenRequest
	var overlay struct {
		*T
		StartTime *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl startTime"`
		EndTime   *xsdDateTime `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl endTime"`
	}
	overlay.T = (*T)(t)
	overlay.StartTime = (*xsdDateTime)(&overlay.T.StartTime)
	overlay.EndTime = (*xsdDateTime)(&overlay.T.EndTime)
	start.Name.Space = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
	start.Name.Local = "NDFDgenRequest"
	return d.DecodeElement(&overlay, &start)
}

type NDFDgenResponse struct {
	XMLName xml.Name `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenResponse"`
	DwmlOut string   `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl dwmlOut"`
}

// May be one of time-series, glance
type Product string

// May be one of conus, nhemi, alaska, guam, hawaii, puertori, npacocn
type Sector string

// May be one of e, m
type Unit string

type WeatherParameters struct {
	Maxt         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd maxt"`
	Mint         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd mint"`
	Temp         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd temp"`
	Dew          bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd dew"`
	Pop12        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd pop12"`
	Qpf          bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd qpf"`
	Sky          bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd sky"`
	Snow         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd snow"`
	Wspd         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd wspd"`
	Wdir         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd wdir"`
	Wx           bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd wx"`
	Waveh        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd waveh"`
	Icons        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd icons"`
	Rh           bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd rh"`
	Appt         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd appt"`
	Incw34       bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd incw34"`
	Incw50       bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd incw50"`
	Incw64       bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd incw64"`
	Cumw34       bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd cumw34"`
	Cumw50       bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd cumw50"`
	Cumw64       bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd cumw64"`
	Critfireo    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd critfireo"`
	Dryfireo     bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd dryfireo"`
	Conhazo      bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd conhazo"`
	Ptornado     bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd ptornado"`
	Phail        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd phail"`
	Ptstmwinds   bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd ptstmwinds"`
	Pxtornado    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd pxtornado"`
	Pxhail       bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd pxhail"`
	Pxtstmwinds  bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd pxtstmwinds"`
	Ptotsvrtstm  bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd ptotsvrtstm"`
	Pxtotsvrtstm bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd pxtotsvrtstm"`
	Tmpabv14d    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd tmpabv14d"`
	Tmpblw14d    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd tmpblw14d"`
	Tmpabv30d    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd tmpabv30d"`
	Tmpblw30d    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd tmpblw30d"`
	Tmpabv90d    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd tmpabv90d"`
	Tmpblw90d    bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd tmpblw90d"`
	Prcpabv14d   bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd prcpabv14d"`
	Prcpblw14d   bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd prcpblw14d"`
	Prcpabv30d   bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd prcpabv30d"`
	Prcpblw30d   bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd prcpblw30d"`
	Prcpabv90d   bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd prcpabv90d"`
	Prcpblw90d   bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd prcpblw90d"`
	Precipar     bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd precipa_r"`
	Skyr         bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd sky_r"`
	Tdr          bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd td_r"`
	Tempr        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd temp_r"`
	Wdirr        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd wdir_r"`
	Wspdr        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd wspd_r"`
	Wwa          bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd wwa"`
	Wgust        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd wgust"`
	Iceaccum     bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd iceaccum"`
	Maxrh        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd maxrh"`
	Minrh        bool `xml:"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd minrh"`
}

// Must match the pattern \d{5}(\-\d{4})?
type ZipCode string

// Must match the pattern \d{5}(\-\d{4})?( \d{5}(\-\d{4})?)*
type ZipCodeList string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type SOAPdoer interface {
	Do(ctx context.Context, action string, request any, response any) error
}
type Client struct{ SOAP SOAPdoer } // Returns National Weather Service digital weather forecast data
func (c *Client) NDFDgen(ctx context.Context, NDFDgenRequest_ NDFDgenRequest) (NDFDgenResponse, error) {
	parameters := []any{&NDFDgenRequest_}
	output := struct {
		XMLName         struct{}        `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenResponse"`
		NDFDgenResponse NDFDgenResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenResponse"`
	}{}
	response := []any{&output.NDFDgenResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgen", &parameters, response)
	return output.NDFDgenResponse, err
}

// Returns National Weather Service digital weather forecast data summarized over either 24- or 12-hourly periods
func (c *Client) NDFDgenByDay(ctx context.Context, NDFDgenByDayRequest_ NDFDgenByDayRequest) (NDFDgenByDayResponse, error) {
	parameters := []any{&NDFDgenByDayRequest_}
	output := struct {
		XMLName              struct{}             `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayResponse"`
		NDFDgenByDayResponse NDFDgenByDayResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayResponse"`
	}{}
	response := []any{&output.NDFDgenByDayResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDay", &parameters, response)
	return output.NDFDgenByDayResponse, err
}

// Returns National Weather Service digital weather forecast data
func (c *Client) NDFDgenLatLonList(ctx context.Context, NDFDgenLatLonListRequest_ NDFDgenLatLonListRequest) (NDFDgenLatLonListResponse, error) {
	parameters := []any{&NDFDgenLatLonListRequest_}
	output := struct {
		XMLName                   struct{}                  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenLatLonListResponse"`
		NDFDgenLatLonListResponse NDFDgenLatLonListResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenLatLonListResponse"`
	}{}
	response := []any{&output.NDFDgenLatLonListResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonList", &parameters, response)
	return output.NDFDgenLatLonListResponse, err
}

// Returns National Weather Service digital weather forecast data summarized over either 24- or 12-hourly periods
func (c *Client) NDFDgenByDayLatLonList(ctx context.Context, NDFDgenByDayLatLonListRequest_ NDFDgenByDayLatLonListRequest) (NDFDgenByDayLatLonListResponse, error) {
	parameters := []any{&NDFDgenByDayLatLonListRequest_}
	output := struct {
		XMLName                        struct{}                       `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayLatLonListResponse"`
		NDFDgenByDayLatLonListResponse NDFDgenByDayLatLonListResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl NDFDgenByDayLatLonListResponse"`
	}{}
	response := []any{&output.NDFDgenByDayLatLonListResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonList", &parameters, response)
	return output.NDFDgenByDayLatLonListResponse, err
}

// Returns National Weather Service digital weather forecast data encoded in GML for a single time
func (c *Client) GmlLatLonList(ctx context.Context, GmlLatLonListRequest_ GmlLatLonListRequest) (GmlLatLonListResponse, error) {
	parameters := []any{&GmlLatLonListRequest_}
	output := struct {
		XMLName               struct{}              `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlLatLonListResponse"`
		GmlLatLonListResponse GmlLatLonListResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlLatLonListResponse"`
	}{}
	response := []any{&output.GmlLatLonListResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonList", &parameters, response)
	return output.GmlLatLonListResponse, err
}

// Returns National Weather Service digital weather forecast data encoded in GML for a time period
func (c *Client) GmlTimeSeries(ctx context.Context, GmlTimeSeriesRequest_ GmlTimeSeriesRequest) (GmlTimeSeriesResponse, error) {
	parameters := []any{&GmlTimeSeriesRequest_}
	output := struct {
		XMLName               struct{}              `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlTimeSeriesResponse"`
		GmlTimeSeriesResponse GmlTimeSeriesResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl GmlTimeSeriesResponse"`
	}{}
	response := []any{&output.GmlTimeSeriesResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeries", &parameters, response)
	return output.GmlTimeSeriesResponse, err
}

// Returns a list of latitude and longitude pairs in a rectangular subgrid defined by the lower left and upper right points
func (c *Client) LatLonListSubgrid(ctx context.Context, LatLonListSubgridRequest_ LatLonListSubgridRequest) (LatLonListSubgridResponse, error) {
	parameters := []any{&LatLonListSubgridRequest_}
	output := struct {
		XMLName                   struct{}                  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSubgridResponse"`
		LatLonListSubgridResponse LatLonListSubgridResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSubgridResponse"`
	}{}
	response := []any{&output.LatLonListSubgridResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgrid", &parameters, response)
	return output.LatLonListSubgridResponse, err
}

// Returns a list of latitude and longitude pairs along a line defined by the latitude and longitude of the 2 endpoints
func (c *Client) LatLonListLine(ctx context.Context, LatLonListLineRequest_ LatLonListLineRequest) (LatLonListLineResponse, error) {
	parameters := []any{&LatLonListLineRequest_}
	output := struct {
		XMLName                struct{}               `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListLineResponse"`
		LatLonListLineResponse LatLonListLineResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListLineResponse"`
	}{}
	response := []any{&output.LatLonListLineResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLine", &parameters, response)
	return output.LatLonListLineResponse, err
}

// Returns a list of latitude and longitude pairs with each pair corresponding to an input zip code.
func (c *Client) LatLonListZipCode(ctx context.Context, LatLonListZipCodeRequest_ LatLonListZipCodeRequest) (LatLonListZipCodeResponse, error) {
	parameters := []any{&LatLonListZipCodeRequest_}
	output := struct {
		XMLName                   struct{}                  `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListZipCodeResponse"`
		LatLonListZipCodeResponse LatLonListZipCodeResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListZipCodeResponse"`
	}{}
	response := []any{&output.LatLonListZipCodeResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCode", &parameters, response)
	return output.LatLonListZipCodeResponse, err
}

// Returns a list of latitude and longitude pairs in a rectangle defined by a central point and distance from that point in the latitudinal and longitudinal directions
func (c *Client) LatLonListSquare(ctx context.Context, LatLonListSquareRequest_ LatLonListSquareRequest) (LatLonListSquareResponse, error) {
	parameters := []any{&LatLonListSquareRequest_}
	output := struct {
		XMLName                  struct{}                 `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSquareResponse"`
		LatLonListSquareResponse LatLonListSquareResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListSquareResponse"`
	}{}
	response := []any{&output.LatLonListSquareResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquare", &parameters, response)
	return output.LatLonListSquareResponse, err
}

// Returns four latitude and longitude pairs for corners of an NDFD grid and the minimum resolution that will return the entire grid
func (c *Client) CornerPoints(ctx context.Context, CornerPointsRequest_ CornerPointsRequest) (CornerPointsResponse, error) {
	parameters := []any{&CornerPointsRequest_}
	output := struct {
		XMLName              struct{}             `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl CornerPointsResponse"`
		CornerPointsResponse CornerPointsResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl CornerPointsResponse"`
	}{}
	response := []any{&output.CornerPointsResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPoints", &parameters, response)
	return output.CornerPointsResponse, err
}

// Returns a list of latitude and longitude pairs paired with the city names they correspond to
func (c *Client) LatLonListCityNames(ctx context.Context, LatLonListCityNamesRequest_ LatLonListCityNamesRequest) (LatLonListCityNamesResponse, error) {
	parameters := []any{&LatLonListCityNamesRequest_}
	output := struct {
		XMLName                     struct{}                    `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListCityNamesResponse"`
		LatLonListCityNamesResponse LatLonListCityNamesResponse `xml:"http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl LatLonListCityNamesResponse"`
	}{}
	response := []any{&output.LatLonListCityNamesResponse}
	err := c.SOAP.Do(ctx, "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNames", &parameters, response)
	return output.LatLonListCityNamesResponse, err
}
