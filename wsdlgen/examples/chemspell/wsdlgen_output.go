// Code generated by wsdlgen. DO NOT EDIT.

// Package chemspell accesses the NLM ChemSpell web service.
package chemspell

import (
	"context"
	"encoding/xml"
)

type ArrayOfxsdstring struct {
	Items     []string `xml:",any"`
	ArrayType string   `xml:"http://schemas.xmlsoap.org/soap/encoding/ arrayType,attr,omitempty"`
}

type GetSugListRequest struct {
	XMLName xml.Name `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws getSugListRequest"`
	Name    string   `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws name"`
	Src     string   `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws src"`
}

type GetSugListResponse struct {
	XMLName xml.Name `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws getSugListResponse"`
	Return  string   `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws return"`
}

type MainRequest struct {
	XMLName xml.Name         `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws mainRequest"`
	Args    ArrayOfxsdstring `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws args"`
}

type MainResponse struct {
	XMLName xml.Name `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws mainResponse"`
}
type SOAPdoer interface {
	Do(ctx context.Context, action string, request any, response any) error
}
type Client struct{ SOAP SOAPdoer }

func (c *Client) GetSugList(ctx context.Context, getSugListRequest GetSugListRequest) (GetSugListResponse, error) {
	parameters := []any{&getSugListRequest}
	output := struct {
		XMLName            struct{}           `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws getSugListResponse"`
		GetSugListResponse GetSugListResponse `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws getSugListResponse"`
	}{}
	response := []any{&output.GetSugListResponse}
	err := c.SOAP.Do(ctx, "", &parameters, response)
	return output.GetSugListResponse, err
}
func (c *Client) Main(ctx context.Context, mainRequest MainRequest) (MainResponse, error) {
	parameters := []any{&mainRequest}
	output := struct {
		XMLName      struct{}     `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws mainResponse"`
		MainResponse MainResponse `xml:"http://chemspell.nlm.nih.gov/axis/SpellAid.jws/axis/SpellAid.jws mainResponse"`
	}{}
	response := []any{&output.MainResponse}
	err := c.SOAP.Do(ctx, "", &parameters, response)
	return output.MainResponse, err
}
